unit Unit_Login;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes,
  Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls,
  Vcl.Menus, D2Bridge.Forms, Vcl.Imaging.pngimage, Vcl.ExtCtrls, UCadastro, IniFiles,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client; //Declare D2Bridge.Forms always in the last unit

type
  TForm_Login = class(TD2BridgeForm)
    Panel1: TPanel;
    Label_Login: TLabel;
    Edit_UserName: TEdit;
    Edit_Password: TEdit;
    Button_Login: TButton;
    Image_BackGround: TImage;
    btnCadastrar: TButton;
    procedure Button_LoginClick(Sender: TObject);
    procedure btnCadastrarClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    function VerificaLogin(usuario, senha: string): boolean;

  public
    idUsuario, nomeUsuario, tipoUsuario : string;

  protected
   procedure ExportD2Bridge; override;
   procedure InitControlsD2Bridge(const PrismControl: TPrismControl); override;
   procedure RenderD2Bridge(const PrismControl: TPrismControl; var HTMLControl: string); override;
  end;

Function Form_Login: TForm_Login;

implementation

Uses
   APSFSIWEBWebApp, UPrincipal, UDataModule;

Function Form_Login: TForm_Login;
begin
 Result:= TForm_Login(TForm_Login.GetInstance);
end;

{$R *.dfm}

{ TForm_Login }

procedure TForm_Login.btnCadastrarClick(Sender: TObject);
begin
  Edit_UserName.text := '';
  edit_Password.text := '';
  if FormCadastro = nil then
    TFormCadastro.CreateInstance;
  FormCadastro.Show;
end;

function TForm_Login.VerificaLogin(usuario : string; senha : string) : boolean;
begin
  with TFDQuery.Create(self) do
  begin
    try
      connection := dm.con;

      sql.Clear;
      sql.Add('SELECT * FROM USUARIOS');
      sql.Add('WHERE NOME = :NOME AND SENHA = :SENHA');

      ParamByName('NOME').Value := usuario;
      ParamByName('SENHA').Value := senha;

      Open;

      if ((FieldByName('NOME').AsString = usuario) and ((FieldByName('SENHA').AsString = senha))) then
      begin

        idUsuario := FieldByName('ID').AsString;
        nomeUsuario := FieldByName('NOME').AsString;
        tipoUsuario := FieldByName('TIPO').AsString;

        result := true;

      end
      else
        result := false;

    finally

    end;
  end;
end;

procedure TForm_Login.Button_LoginClick(Sender: TObject);
begin
 //Your Code

 if (Edit_UserName.Text <> '') and (Edit_Password.Text <> '') then
  begin
    if VerificaLogin(Edit_UserName.Text, Edit_Password.Text) then
    begin

      Edit_UserName.Text := '';
      Edit_Password.Text := '';

      if Form1 = nil then
      TForm1.CreateInstance;
      Form1.Show;
    end

    else
    begin
      D2Bridge.Validation(Edit_UserName, false);
      D2Bridge.Validation(Edit_Password, false, 'Invalid username or password');
      Exit;
    end;
  end
  else
    showmessage('Preencha todos os campos!');

// //***EXAMPLE***
// if (Edit_UserName.Text <> '') and (Edit_Password.Text <> '') then
// begin
//
// end else
// begin
//  D2Bridge.Validation(Edit_UserName, false);
//  D2Bridge.Validation(Edit_Password, false, 'Invalid username or password');
//  Exit;
// end;

end;

procedure TForm_Login.ExportD2Bridge;
begin
 inherited;

 Title:= 'My D2Bridge Web Application';
 SubTitle:= 'My WebApp';

 //Background color
 D2Bridge.HTML.Render.BodyStyle:= 'background-color: #191970;';

 //TemplateClassForm:= TD2BridgeFormTemplate;
 D2Bridge.FrameworkExportType.TemplateMasterHTMLFile:= '';
 D2Bridge.FrameworkExportType.TemplatePageHTMLFile := '';

 //Export yours Controls
 with D2Bridge.Items.add do
 begin

  //Image Backgroup Full Size *Use also ImageFromURL...
  ImageFromTImage(Image_BackGround, CSSClass.Image.Image_BG20_FullSize);

  with Card do
  begin
   CSSClasses:= CSSClass.Card.Card_Center;
   HTMLStyle := 'background-color: #191970;';

//   ImageICOFromTImage(Image_Logo, CSSClass.Col.ColSize4);

   with BodyItems.Add do
   begin
    with Row.Items.Add do
     VCLObj(Label_Login);
    with Row.Items.Add do
     VCLObj(Edit_UserName, 'ValidationLogin', true);
    with Row.Items.Add do
     VCLObj(Edit_Password, 'ValidationLogin', true);
    with Row.Items.Add do
     VCLObj(Button_Login, 'ValidationLogin', false, CSSClass.Button.open);
    with Row.Items.Add do
     VCLObj(btnCadastrar, CSSClass.Button.add);
   end;
  end;
 end;
end;

procedure TForm_Login.FormCreate(Sender: TObject);
var
  ini : TIniFile;
  CaminhoConfig, CaminhoBase: string;
begin
  CaminhoConfig := ExtractFilePath(ParamStr(0)) + 'config.txt';
  Ini := TIniFile.Create(CaminhoConfig);
  try
    if dm = nil then
      Tdm.CreateInstance;

//    dm.con.Connected := False;
//    dm.con.Params.Clear;
//    dm.con.Params.DriverID := 'FB';
//    dm.con.Params.Database := Ini.ReadString('CONFIG', 'Base', '');
//    dm.con.Params.UserName := Ini.ReadString('CONFIG', 'User_Name', '');
//    dm.con.Params.Password := Ini.ReadString('CONFIG', 'Password', '');
//    dm.con.Connected := True;

      DM.Con.Connected := False;
      DM.Con.Params.Values['Database'] := IncludeTrailingPathDelimiter(ExtractFilePath(ParamStr(0))) + 'dados\BDAPSFDSI.FDB';
      DM.Con.Connected := True;

  finally
    Ini.Free;
  end;

end;

procedure TForm_Login.InitControlsD2Bridge(const PrismControl: TPrismControl);
begin
 inherited;

end;

procedure TForm_Login.RenderD2Bridge(const PrismControl: TPrismControl; var HTMLControl: string);
begin
 inherited;

 //Intercept HTML

//  if PrismControl.VCLComponent = Edit_UserName then
//  begin
//
//  end;

end;

end.
